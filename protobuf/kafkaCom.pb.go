// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kafkaCom.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Currency represents currency information
type Consumer struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Consumer) Reset()         { *m = Consumer{} }
func (m *Consumer) String() string { return proto.CompactTextString(m) }
func (*Consumer) ProtoMessage()    {}
func (*Consumer) Descriptor() ([]byte, []int) {
	return fileDescriptor_kafkaCom_37b9d13fbbdc388b, []int{0}
}
func (m *Consumer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Consumer.Unmarshal(m, b)
}
func (m *Consumer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Consumer.Marshal(b, m, deterministic)
}
func (dst *Consumer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consumer.Merge(dst, src)
}
func (m *Consumer) XXX_Size() int {
	return xxx_messageInfo_Consumer.Size(m)
}
func (m *Consumer) XXX_DiscardUnknown() {
	xxx_messageInfo_Consumer.DiscardUnknown(m)
}

var xxx_messageInfo_Consumer proto.InternalMessageInfo

func (m *Consumer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// CurrencyList used for list of currencies
type ConsumerList struct {
	Items                []*Consumer `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConsumerList) Reset()         { *m = ConsumerList{} }
func (m *ConsumerList) String() string { return proto.CompactTextString(m) }
func (*ConsumerList) ProtoMessage()    {}
func (*ConsumerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_kafkaCom_37b9d13fbbdc388b, []int{1}
}
func (m *ConsumerList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerList.Unmarshal(m, b)
}
func (m *ConsumerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerList.Marshal(b, m, deterministic)
}
func (dst *ConsumerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerList.Merge(dst, src)
}
func (m *ConsumerList) XXX_Size() int {
	return xxx_messageInfo_ConsumerList.Size(m)
}
func (m *ConsumerList) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerList.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerList proto.InternalMessageInfo

func (m *ConsumerList) GetItems() []*Consumer {
	if m != nil {
		return m.Items
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_kafkaCom_37b9d13fbbdc388b, []int{2}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Consumer)(nil), "protobuf.Consumer")
	proto.RegisterType((*ConsumerList)(nil), "protobuf.ConsumerList")
	proto.RegisterType((*Empty)(nil), "protobuf.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KafkaService service

type KafkaServiceClient interface {
	// GetCurrencyList  returns matching Currency values as list
	// Example of a unary call
	GetConsumerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConsumerList, error)
	// GetCurrencyStream returns matching Currencies as a server stream
	// Example of using server to client stream.
	StartNewConsumer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Consumer, error)
	// SaveCurrencyStream sends multiple currencies to server to be saved
	// returns a list of saved currency.
	// Example of using client stream to server.
	KillConsumer(ctx context.Context, in *Consumer, opts ...grpc.CallOption) (*Consumer, error)
}

type kafkaServiceClient struct {
	cc *grpc.ClientConn
}

func NewKafkaServiceClient(cc *grpc.ClientConn) KafkaServiceClient {
	return &kafkaServiceClient{cc}
}

func (c *kafkaServiceClient) GetConsumerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConsumerList, error) {
	out := new(ConsumerList)
	err := grpc.Invoke(ctx, "/protobuf.KafkaService/GetConsumerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaServiceClient) StartNewConsumer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Consumer, error) {
	out := new(Consumer)
	err := grpc.Invoke(ctx, "/protobuf.KafkaService/StartNewConsumer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaServiceClient) KillConsumer(ctx context.Context, in *Consumer, opts ...grpc.CallOption) (*Consumer, error) {
	out := new(Consumer)
	err := grpc.Invoke(ctx, "/protobuf.KafkaService/KillConsumer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KafkaService service

type KafkaServiceServer interface {
	// GetCurrencyList  returns matching Currency values as list
	// Example of a unary call
	GetConsumerList(context.Context, *Empty) (*ConsumerList, error)
	// GetCurrencyStream returns matching Currencies as a server stream
	// Example of using server to client stream.
	StartNewConsumer(context.Context, *Empty) (*Consumer, error)
	// SaveCurrencyStream sends multiple currencies to server to be saved
	// returns a list of saved currency.
	// Example of using client stream to server.
	KillConsumer(context.Context, *Consumer) (*Consumer, error)
}

func RegisterKafkaServiceServer(s *grpc.Server, srv KafkaServiceServer) {
	s.RegisterService(&_KafkaService_serviceDesc, srv)
}

func _KafkaService_GetConsumerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServiceServer).GetConsumerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.KafkaService/GetConsumerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServiceServer).GetConsumerList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaService_StartNewConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServiceServer).StartNewConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.KafkaService/StartNewConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServiceServer).StartNewConsumer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaService_KillConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consumer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServiceServer).KillConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.KafkaService/KillConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServiceServer).KillConsumer(ctx, req.(*Consumer))
	}
	return interceptor(ctx, in, info, handler)
}

var _KafkaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.KafkaService",
	HandlerType: (*KafkaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConsumerList",
			Handler:    _KafkaService_GetConsumerList_Handler,
		},
		{
			MethodName: "StartNewConsumer",
			Handler:    _KafkaService_StartNewConsumer_Handler,
		},
		{
			MethodName: "KillConsumer",
			Handler:    _KafkaService_KillConsumer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kafkaCom.proto",
}

func init() { proto.RegisterFile("kafkaCom.proto", fileDescriptor_kafkaCom_37b9d13fbbdc388b) }

var fileDescriptor_kafkaCom_37b9d13fbbdc388b = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4e, 0x4c, 0xcb,
	0x4e, 0x74, 0xce, 0xcf, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49, 0xa5,
	0x69, 0x4a, 0x72, 0x5c, 0x1c, 0xce, 0xf9, 0x79, 0xc5, 0xa5, 0xb9, 0xa9, 0x45, 0x42, 0x42, 0x5c,
	0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x05,
	0x17, 0x0f, 0x4c, 0xde, 0x27, 0xb3, 0xb8, 0x44, 0x48, 0x83, 0x8b, 0x35, 0xb3, 0x24, 0x35, 0xb7,
	0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x48, 0x0f, 0x66, 0x92, 0x1e, 0x4c, 0x59, 0x10,
	0x44, 0x81, 0x12, 0x3b, 0x17, 0xab, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0xd1, 0x41, 0x46, 0x2e, 0x1e,
	0x6f, 0x90, 0xfd, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x36, 0x5c, 0xfc, 0xee, 0xa9,
	0x25, 0x28, 0xc6, 0xf2, 0x23, 0xcc, 0x01, 0x6b, 0x92, 0x12, 0xc3, 0x34, 0x18, 0xa4, 0x50, 0x89,
	0x41, 0xc8, 0x92, 0x4b, 0x20, 0xb8, 0x24, 0xb1, 0xa8, 0xc4, 0x2f, 0xb5, 0x1c, 0xee, 0x72, 0x0c,
	0xed, 0x58, 0xdc, 0xa5, 0xc4, 0x20, 0x64, 0xc1, 0xc5, 0xe3, 0x9d, 0x99, 0x93, 0x83, 0xf0, 0x30,
	0xa6, 0x2a, 0xec, 0x3a, 0x93, 0xd8, 0xc0, 0x82, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b,
	0x2e, 0xa0, 0x09, 0x49, 0x01, 0x00, 0x00,
}
